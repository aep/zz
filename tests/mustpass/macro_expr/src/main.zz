using <stdio.h>::{printf};
using <stdlib.h>::{atoi};
using err;
using ast;

using bam;

/// creates literal string with arg0 repeated arg1 times
export macro repeat()  {
    new+1000 a = ast::from_macro();
    err::assert2(a.args[0].t == ast::Expression::LiteralString, "expected arg0: string");
    err::assert2(a.args[1].t == ast::Expression::Literal,       "expected arg1: number");
    let num = (int)atoi(a.args[1].v.string);

    printf("\"");
    for (int mut i = 0; i < num; i++) {
        printf("%s", a.args[0].v.string);
    }
    printf("\"");
}


/// tests if call in statement context will correctly expand to multiple statements
///
/// TODO: statementm macros are still weird, because the first pass will yield nothing
///       resulting in var declarations not being available in the first pass
///       the workaround for users is to have macros in separate modules.

export macro make_int() {
    printf("int mut a = 0;\n");
    printf("return a;\n");
}

export macro increment() {
    new+1000 a = ast::from_macro();
    if a.args[0].t == ast::Expression::Name {
        printf("%s = %s + 1;\n", a.args[0].v.string, a.args[0].v.string);
    }
}

export macro add() {
    new+1000 a = ast::from_macro();
    if a.args[0].t == ast::Expression::Name {
        printf("%s = %s + %s;\n", a.args[0].v.string, a.args[1].v.string, a.args[2].v.string);
    }
}

export fn main() -> int {

    @bam::happyness();

    int mut foo = 0;
    @increment(foo);
    if 1 != foo {
      return 1;
    }
    @add(foo, 1, 2);
    if 3 != foo {
      return 1;
    }

    printf("hello %s\n", @repeat("world ", 32));
    @make_int("a", 1);
}
