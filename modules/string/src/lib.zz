using <string.h> as c_string;
using <stdio.h> as stdio;
using <stdarg.h>::{va_list, va_start, va_end};
using <stdio.h>::{vsnprintf, printf, FILE};
using slice::{Slice, MutSlice};

export struct String+ {
    usize   len;
    char    mem[];
}


/*
TODO
this in the beginning of every function:

static_attest(self->len < t);

should have been a where condition,
but its too damn annoing for the user.

we need conditions that get checked for every use of a struct automatically

*/

export fn slice(String+tail mut * self) -> Slice
    model return.size <= tail
{
    static_attest(self->len < tail);
    return Slice {
        size: self->len,
        mem:  (u8 mut*)self->mem,
    };
}

export fn append_slice(String+tail mut * self) -> MutSlice
    model return.slice.size == tail
    model return.at         <= tail
    model return.slice.size >= len(return.slice.mem)
{

    static_attest(self->len < tail);

    return MutSlice {
        slice: Slice {
            size:   tail,
            mem:    (u8 mut*)self->mem,
        },
        at:     self->len,
    };
}

export fn clear(String+tail mut * self)
    model self->len  == 0
    model nullterm(self->mem)
{
    c_string::memset(self->mem, 0, tail);
    self->len = 0;

    static_attest(nullterm(self->mem));
}

export fn push(String+t mut * self, char cstr) -> bool
    @solver = yices2
    where t > 2
    model self->len < t
    model nullterm(self->mem)
{
    static_attest(self->len < t);
    static_attest(nullterm(self->mem));

    if self->len > t - 2 {
        return false;
    }

    static_attest(self->len < len(self->mem));
    (self->mem)[self->len] = cstr;
    self->len += 1;

    return true;
}

export fn pop(String+t mut * self) -> bool
    model self->len < t
{
    static_attest(self->len < t);

    if self->len == 0 {
        return false;
    }
    self->len -= 1;
    (self->mem)[self->len] = 0;
    return true;
}

export fn append_cstr(String+t mut * self, char * cstr)
    @solver = yices2
    where nullterm(cstr)
    model nullterm(self->mem)
    model self->len < t
{
    static_attest(self->len < t);

    usize mut inlen = strlen(cstr);

    if inlen + self->len > t - 1 {
        inlen = t - 1 - self->len;
    }

    c_string::memcpy(self->mem + self->len, cstr, inlen);
    self->len += inlen;

    static_attest(nullterm(self->mem))
}

export fn append(String+t mut * self, String+t2 * other)
    @solver = yices2
    model self->len < t
    model nullterm(self->mem)
{
    static_attest(self->len < t);

    usize mut inlen = other->len;

    if inlen + self->len > t - 1 {
        inlen = t - 1 - self->len;
    }

    c_string::memcpy(self->mem + self->len, other->mem, inlen);
    self->len += inlen;

    static_attest(nullterm(self->mem))
}


export fn append_bytes(String+t mut* self, u8* bytes, usize mut inlen)
    @solver = yices2
    where len(bytes) >= inlen
    model self->len < t
    model nullterm(self->mem)
{
    static_attest(self->len < t);

    if inlen + self->len > t - 1 {
        inlen = t - 1 - self->len;
    }

    c_string::memcpy(self->mem + self->len, bytes, inlen);
    self->len += inlen;

    static_attest(nullterm(self->mem))
}

export fn format(String+tail mut * self, char *fmt, ...) -> int
    where tail > 0
    model self->len < tail
{
    static_attest(self->len < tail);

    va_list mut args;
    va_start (args, fmt);

    usize isfree = tail - self->len;

    int r = as<int>(vsnprintf(
        self->mem +  self->len,
        isfree,
        fmt,
        args
    ));
    va_end (args);

    if r > 0 {
        if (usize)r >= isfree {
            self->len += (isfree - 1);
        } else {
            self->len += as<usize>(r);
        }
    }

    static_attest(self->len < len(self->mem));
    (self->mem)[self->len] = 0;

    return r;
}

export fn eq_cstr(String+tail* self, char * unsafe b) -> bool
    where nullterm(b)
{
    return as<int>(c_string::strcmp(self->mem,b)) == 0;
}

export fn cstr_eq(char *unsafe a, char * unsafe b) -> bool
    where a == 0 || nullterm(a)
    where b == 0 || nullterm(b)
{
    return as<int>(c_string::strcmp(a,b)) == 0;
}

export fn starts_with_cstr(String+tail* self, char *unsafe a) -> bool {
    usize alen = as<usize>(c_string::strlen(a));
    if alen > self->len {
        return false;
    }
    return as<int>(c_string::strncmp(self->mem,a,alen)) == 0;
}

export fn fgets(String+tail mut* self, FILE mut * unsafe stream) -> bool
{
    static_attest(self->len < tail);

    char *rr = (char*)stdio::fgets(self->mem + self->len, tail - self->len, stream);
    if rr == 0 {
        return false;
    }

    char * extmem = self->mem + self->len;
    static_attest(safe(extmem));
    static_attest(nullterm(extmem));
    self->len += strlen(extmem);
    return true;
}



export fn substr(String+tail *self, usize from, usize mut size, String+tail2 mut* other)
    @solver = yices2
    where tail  > 0
    where tail2 > 0
    model self->len  < tail
    model other->len < tail2
{
    static_attest(other->len < len(other->mem));
    static_attest(self->len < tail);

    if self->len == 0 {
        return;
    }

    if from >= self->len {
        return;
    }

    if size == 0 {
        size = self->len;
    }

    if from + size >= self->len {
        size = self->len - from;
    }

    //printf("A len1: %zu, len2: %zu, from: %zu, size: %zu\n",
    //    self->len, other->len, from, size);

    if other->len + size + 1 >= tail2 {
        if other->len + 1 >= tail2 {
            return;
        }
        size = tail2 - 1 - other->len;
    }

    //TODO i'm not sure what ssa is confused about
    static_attest(size + other->len < tail2);

    //printf("B len1: %zu, len2: %zu, from: %zu, size: %zu\n",
    //    self->len, other->len, from, size);


    if size == 0 {
        return;
    }

    c_string::memcpy(other->mem + other->len, self->mem + from, size);
    (other->mem)[size + other->len] = 0;
    other->len += size;
}





export fn split(String+tail *self, char token, usize mut *iterator, String+tail2 mut* other) -> bool
    model self->len  < tail
    where other->len < tail2
    model other->len < tail2
{
    static_attest(self->len < tail);

    usize start = *iterator;

    if *iterator >= self->len {
        return false;
    }

    for (; *iterator < self->len; (*iterator)++) {
        if (self->mem)[*iterator] == token {
            break;
        }
    }

    usize size = *iterator - start;
    *iterator += 1;
    if size == 0 {
        return true;
    }

    substr(self, start, size, other);
    return true;
}


export fn space(String+tail *self) -> usize
    model return == tail - self->len
{
    return tail - self->len;
}

export fn strlen(char *s) -> usize
    where nullterm(s)
    model return == len(s)
{
    usize l = (usize)c_string::strlen(s);
    static_attest(l == len(s));
    return l;
}
