using <stdarg.h>::{va_list, va_start, va_end};
using slice::{Slice, MutSlice};
using mem;

using <stdio.h>::{FILE};
inline using "native.h" as native;

export struct String+ {
    usize   len;
    char    mem[];
}


/*
TODO
this in the beginning of every function:

static_attest(self->len < t);

should have been a where condition,
but its too damn annoing for the user.

we need conditions that get checked for every use of a struct automatically

*/


/// length of string (excluding null terminator)
export fn slen(String * self) -> usize {
    return self->len;
}

/// string as null terminated c string
export fn cstr(String * self) -> char *
    model safe(return)
    model nullterm(return)
{
    static_attest(nullterm(self->mem));
    return self->mem;
}

/// string as slice
export fn slice(String+tail mut * self) -> Slice
    model return.size <= tail
    model len(return.mem) >= return.size
{
    static_attest(self->len < tail);
    return Slice {
        size: self->len,
        mem:  (u8 mut*)self->mem,
    };
}

/// append a slice to this string
export fn append_slice(String+tail mut * self) -> MutSlice
    model return.slice.size == tail
    model return.at         <= tail
    model return.slice.size >= len(return.slice.mem)
{

    static_attest(self->len < tail);

    return MutSlice {
        slice: Slice {
            size:   tail,
            mem:    (u8 mut*)self->mem,
        },
        at:     self->len,
    };
}

/// make an empty string
export fn make(String+tail mut new* self)
    model self->len  == 0
    model nullterm(self->mem)
{
    clear(self)
}

/// make a string from raw bytes with given len
export fn from(String+t new mut* self, u8* bytes, usize mut inlen)
    @solver("yices2")
    where len(bytes) >= inlen
    model self->len < t
    model nullterm(self->mem)
{
  make(self);
  self->append_bytes(bytes, inlen);
}

/// make a string from a slice
export fn from_slice(String+t new mut* self, Slice *slice)
    @solver("yices2")
    where safe(slice)
    where len(slice->mem) >= slice->size
    model self->len < t
    model nullterm(self->mem)
{
  make(self);
  u8* bytes = slice->mem;
  usize size = slice->size;
  static_attest(safe(bytes));
  self->append_bytes(bytes, size);
}

/// make a string from a c string
export fn from_cstr(String+t new mut* self, char *cstr)
    @solver("yices2")
    where nullterm(cstr)
    model nullterm(self->mem)
    model self->len < t
{
  make(self);
  self->append_cstr(cstr);
}

/// clear the string
export fn clear(String+tail mut new* self)
    model self->len  == 0
    model nullterm(self->mem)
{
    mem::set(self->mem, 0, tail);
    self->len = 0;

    static_attest(nullterm(self->mem));
}

/// push a single character
export fn push(String+t mut * self, char cstr) -> bool
    @solver("yices2")
    where t > 2
    model self->len < t
    model nullterm(self->mem)
{
    static_attest(self->len < t);
    static_attest(nullterm(self->mem));

    if self->len > t - 2 {
        return false;
    }

    static_attest(self->len < len(self->mem));
    (self->mem)[self->len] = cstr;
    self->len += 1;

    return true;
}

/// remove the last character
///
/// returns false if string was empty

export fn pop(String+t mut * self) -> bool
    model self->len < t
{
    static_attest(self->len < t);

    if self->len == 0 {
        return false;
    }
    self->len -= 1;
    (self->mem)[self->len] = 0;
    return true;
}

/// append a null terminated c string
export fn append_cstr(String+t mut * self, char * cstr)
    @solver("yices2")
    where nullterm(cstr)
    model nullterm(self->mem)
    model self->len < t
{
    static_attest(self->len < t);

    usize mut inlen = strlen(cstr);

    if inlen + self->len > t - 1 {
        inlen = t - 1 - self->len;
    }

    unsafe{mem::copy(cstr, self->mem + self->len, inlen);};
    self->len += inlen;

    (self->mem)[self->len] = 0;
    static_attest(nullterm(self->mem))
}

/// append another string
export fn append(String+t mut * self, String+t2 * other)
    @solver("yices2")
    model self->len < t
    model nullterm(self->mem)
{
    static_attest(self->len < t);

    usize mut inlen = other->len;

    if inlen + self->len > t - 1 {
        inlen = t - 1 - self->len;
    }

    unsafe { mem::copy(other->mem, self->mem + self->len, inlen); } 
    self->len += inlen;

    static_attest(nullterm(self->mem))
}


/// append raw bytes with given len
export fn append_bytes(String+t mut* self, u8* bytes, usize mut inlen)
    @solver("yices2")
    where len(bytes) >= inlen
    model self->len < t
    model nullterm(self->mem)
{
    static_attest(self->len < t);

    if inlen + self->len > t - 1 {
        inlen = t - 1 - self->len;
    }

    unsafe { mem::copy(bytes, self->mem + self->len, inlen);} 
    self->len += inlen;

    static_attest(nullterm(self->mem))
}

/// append formated string with vsnprintf
export fn format(String+tail mut * self, char *fmt, ...) -> int
    where tail > 0
    model self->len < tail
{
    va_list mut args;
    va_start (args, fmt);
    int r = vformat(self, fmt, args);
    va_end (args);

    return r;
}

export fn vformat(String+tail mut * self, char *fmt, va_list mut args) -> int
    where tail > 0
    model self->len < tail
{
    static_attest(self->len < tail);

    usize isfree = tail - self->len;

    int r = as<int>(native::xN_vsnprintf(
        self->mem +  self->len,
        isfree,
        fmt,
        args
    ));

    if r > 0 {
        if (usize)r >= isfree {
            self->len += (isfree - 1);
        } else {
            self->len += as<usize>(r);
        }
    }

    static_attest(self->len < len(self->mem));
    (self->mem)[self->len] = 0;

    return r;
}


/// test if this string is equal with a c string
export fn eq_cstr(String+tail* self, char * unsafe b) -> bool
    where nullterm(b)
{
    static_attest(self->len < len(self->mem));
    if b == 0 {
        return self->len == 0;
    }
    static_attest(safe(b));
    let l2 = strlen(b);
    if l2 != self->len {
        return false;
    }
    return mem::eq(self->mem, b, l2);
}

/// test if some c string is equal another c string
export fn cstr_eq(char *unsafe a, char * unsafe b) -> bool
    where a == 0 || nullterm(a)
    where b == 0 || nullterm(b)
{
    if a == 0 || b == 0 {
        return a == b;
    }
    static_attest(safe(a));
    static_attest(safe(b));
    let l1 = strlen(a);
    let l2 = strlen(b);
    if l1 != l2 {
        return false;
    }
    return mem::eq(a, b, l2);
}

/// test if this string begings with some c string
export fn starts_with_cstr(String+tail* self, char *unsafe a) -> bool
    where a == 0 || nullterm(a)
{
    static_attest(self->len < len(self->mem));
    if a == 0 {
        return self->len == 0;
    }
    static_attest(safe(a));
    usize alen = strlen(a);
    if alen > self->len {
        return false;
    }
    return mem::eq(self->mem,a,alen);
}

/// test if self ends with other string
export fn ends_with_cstr(String+tail *self, char *unsafe a) -> bool
    where a == 0 || nullterm(a)
{
    static_attest(self->len < len(self->mem));

    if a == 0 {
        return self->len == 0;
    }
    static_attest(safe(a));
    usize alen = strlen(a);
    if alen > self->len {
        return false;
    }

    usize start = self->len - alen;
    return mem::eq(self->mem + start, a , alen);
}

/// append to this string by reading from a FILE
export fn fgets(String+tail mut* self, FILE mut * unsafe stream) -> bool
{
    static_attest(self->len < tail);

    char *rr = unsafe<char*>(native::xN_fgets(self->mem + self->len, tail - self->len, stream));
    if rr == 0 {
        return false;
    }

    char * extmem = self->mem + self->len;
    static_attest(safe(extmem));
    static_attest(nullterm(extmem));
    self->len += strlen(extmem);
    return true;
}

/// copy parts of this string to other string
export fn substr(String+tail *self, usize from, usize mut size, String+tail2 mut* other)
    @solver("yices2")
    where tail  > 0
    where tail2 > 0
    model self->len  < tail
    model other->len < tail2
{
    static_attest(other->len < len(other->mem));
    static_attest(self->len < tail);

    if self->len == 0 {
        return;
    }

    if from >= self->len {
        return;
    }

    if size == 0 {
        size = self->len;
    }

    if from + size >= self->len {
        size = self->len - from;
    }

    //printf("A len1: %zu, len2: %zu, from: %zu, size: %zu\n",
    //    self->len, other->len, from, size);

    if other->len + size + 1 >= tail2 {
        if other->len + 1 >= tail2 {
            return;
        }
        size = tail2 - 1 - other->len;
    }

    //TODO i'm not sure what ssa is confused about
    static_attest(size + other->len < tail2);

    if size == 0 {
        return;
    }

    unsafe { mem::copy(self->mem + from, other->mem + other->len, size); } 
    (other->mem)[size + other->len] = 0;
    other->len += size;
}

/// split this string by token and copy the substring into other
export fn split(String+tail *self, char token, usize mut *iterator, String+tail2 mut* other) -> bool
    model self->len  < tail
    where other->len < tail2
    model other->len < tail2
{
    static_attest(self->len < tail);

    usize start = *iterator;

    if *iterator >= self->len {
        return false;
    }

    for (; *iterator < self->len; (*iterator)++) {
        if (self->mem)[*iterator] == token {
            break;
        }
    }

    usize size = *iterator - start;
    *iterator += 1;
    if size == 0 {
        return true;
    }

    substr(self, start, size, other);
    return true;
}


/// returns the amount of bytes still left in the tail
export fn space(String+tail *self) -> usize
    model return == tail - self->len
{
    return tail - self->len;
}

/// length of a null terminated c string
export fn strlen(char * mut s) -> usize
    where nullterm(s)
    model return == len(s)
{
    if s == 0 {
        static_attest(len(s) == 0);
        return 0;
    }
    usize mut l = 0;
    while unsafe<bool>(s[l] != 0) {
        l++;
    }

    static_attest(l == len(s));
    return l;
}
