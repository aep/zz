using <stdio.h>::{printf};
using <stdlib.h>::{atoi};
using <buffer.h>::{strcmp, memset};
using err;
using buffer;
using json;

enum Fuel {
    Dinosaurs,
    Electric,
}

struct Engine{
    Fuel fuel;
    int charge[8];
}

struct Vehicle {
    int height;
    int wheels;
    Engine engine;
}

symbol InvalidValue;

fn deserialize_charge(err::Err+et mut *e, json::Parser+pt mut* p, void mut *user, char *k, json::Value v)
    where err::checked(*e)
{
    printf("charge.>%s< == >%s< %u, %d [%zu]\n", k, v.buffer, v.t, v.integer, v.index);
}

fn deserialize_engine(err::Err+et mut *e, json::Parser+pt mut* p, void mut *user, char *k, json::Value v)
    where err::checked(*e)
    where nullterm(k)
    where nullterm(v.buffer)
{
    let into = (Engine mut*)user;
    printf("engine.>%s< == >%s< %d\n", k, v.buffer, v.integer);
    if buffer::cstr_eq("fuel", k) && v.t == json::ValueType::String{
        if buffer::cstr_eq("dinosaurs", v.buffer) {
            into->fuel = Fuel::Dinosaurs;
        } else if buffer::cstr_eq("electric", v.buffer)  {
            into->fuel = Fuel::Electric;
        } else {
            err::fail(e, InvalidValue , "invalid fuel value %s", v);
        }
    } else if buffer::cstr_eq("charge", k) && v.t == json::ValueType::Array {
        json::next(p, e, deserialize_charge, &(into->charge));
        if err::check(e) {
            return;
        }
    }
}

fn deserialize_vehicle(err::Err+et mut *e, json::Parser+pt mut* p, void mut *user, char *k, json::Value v)
    where err::checked(*e)
    where nullterm(k)
{
    let into = (Vehicle mut*)user;
    printf("vehicle.>%s< == >%s< %d\n", k, v.buffer, v.integer);

    if buffer::cstr_eq("height", k) {
        into->height = v.integer;
    } else if buffer::cstr_eq("engine", k) {
        json::next(p, e, deserialize_engine, &(into->engine));
        if err::check(e) {
            return;
        }
    }
}



export fn main() -> int {
    err::Err+1000 mut e = {0};
    err::make(&e);


    Vehicle mut v = {0};

    new+100 parser = json::parser(&e, deserialize_vehicle, (void mut*)&v);
    err::abort(&e);
    char *str = r#"{
        "height":   
            12,
        "add": "\"[{123123}:b",
        "v": [23],
        "engine": {
            "rolling": "hard",
            "fuel": "electric",
            "charge": [9229, -399888]
        },
        "deep": "nah"
    }"#;

    json::push(&parser, &e, str, static(len(str)));
    err::abort(&e);

    return 0;
}
