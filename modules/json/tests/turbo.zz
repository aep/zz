using <stdio.h>::{printf, fread, stdin};
using <stdlib.h>::{atoi};
using <string.h>::{strcmp, memset};
using err;
using string::{String};
using string;
using json;



test test123  {
}


fn pretty(err::Err+et mut *e, json::Parser+pt mut* p, usize mut * depth, char *k, json::Value v)
    where err::checked(*e)
{
    switch v.t {
        json::ValueType::Object => {
            json::next(p,  e, (json::deserialize_t)pretty, (void mut*)((usize)depth + 1));
            if err::check(e) {
                return;
            }
        }
        json::ValueType::Array => {
            json::next(p,  e, (json::deserialize_t)pretty, (void mut*)((usize)depth + 1));
            if err::check(e) {
                return;
            }
        }
        json::ValueType::String => {
        }
        json::ValueType::Integer => {
        }
    }
}



export fn main() -> int {
    err::Err+1000 mut e = {0};
    err::new(&e);

    char * text = r#"{
        "height":
            12,
        "add": "\"[{123123}:b",
        "v": [23],
        "engine": {
            "rolling": "hard",
            "fuel": "electric",
            "charge": [9229, -399888]
        },
        "deep": "nah"
    }"#;

    for(usize mut i = 0;i<30000;i++) {
        usize depth = 0;
        json::Parser+100 mut parser = {0};
        json::new(&parser,  &e, (json::deserialize_t)pretty, (void mut*)depth);
        if err::check(&e) {
            err::eprint(&e);
            return 2;
        }
        static_attest(err::checked(e));

        json::push(&parser, &e, text, static(len(text)));
        if err::check(&e) {
            err::eprint(&e);
            return 2;
        }
    }


    return 0;
}
