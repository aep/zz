using <stdio.h>::{printf, fread, stdin, stderr};
using <stdlib.h>::{atoi};
using <buffer.h>::{strcmp, memset};
using err;
using buffer;
using json;



test test123  {
}


fn pretty(json::U *u, err::Err+et mut *e, json::Parser+pt mut* p, char *k, json::Value v)
    where err::checked(*e)
{
    let depth = (usize)u->user2;
    switch v.t {
        json::ValueType::Object => {
            json::next(p,  e, json::U{
                it:     pretty,
                user2:  depth + 1,
            });
            if err::check(e) {
                return;
            }
        }
        json::ValueType::Array => {
            json::next(p,  e, json::U{
                it:     pretty,
                user2:  depth + 1,
            });
            if err::check(e) {
                return;
            }
        }
        json::ValueType::String => {
        }
        json::ValueType::Integer => {
        }
    }
}



export fn main() -> int {
    err::Err+1000 mut e = {0};
    err::make(&e);

    char * text = r#"{
        "height":
            12,
        "add": "\"[{123123}:b",
        "v": [23],
        "engine": {
            "rolling": "hard",
            "fuel": "electric",
            "charge": [9229, -399888]
        },
        "deep": "nah"
    }"#;

    for(usize mut i = 0;i<30000;i++) {
        new+100 parser = json::parser(&e, json::U{ it: pretty, user2: 0} );
        if err::check(&e) {
            err::eprintf(&e, stderr);
            return 2;
        }
        static_attest(err::checked(e));

        json::push(&parser, &e, text, static(len(text)));
        if err::check(&e) {
            err::eprintf(&e, stderr);
            return 2;
        }
    }


    return 0;
}
