using <string.h> as c_string;
using mut_slice::{MutSlice};

export struct Slice {
    usize   size;
    u8 *    mem;
}

export fn borrow(Slice *self) -> Slice *
    where len(self->mem)    >= self->size
    model safe(return)
    model len(return->mem)  >= return->size
{
    return self;
}

export fn eq(Slice *self, Slice *other) -> bool
{
    if self->size != other->size {
        return false;
    }
    return (c_string::memcmp(self->mem, other->mem, self->size) == 0);
}

export fn eq_cstr(Slice *self, char *other) -> bool
    where nullterm(other)
{
    usize othersize = (usize)c_string::strlen(other);
    if self->size != othersize {
        return false;
    }
    return (c_string::memcmp(self->mem, other, self->size) == 0);
}

export fn new(u8 *mem, usize size) -> Slice
    where len(mem) >= size
    model len(return.mem) == return.size
    model len(return.mem) == size
{
    let r = Slice {
        size:   size,
        mem:    mem,
    };
    static_attest(len(r.mem) == r.size);
    return r;
}
