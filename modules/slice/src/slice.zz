using <string.h> as c_string;

export struct Slice {
    u8 *    mem;
    usize   size;
}

pub theory integrity(Slice *self) -> bool
(
    safe(self->mem)
    && len(self->mem) >= self->size
)

export fn eq(Slice *self, Slice *other) -> bool
    where integrity(self)
    where integrity(other)
{
    if self->size != other->size {
        return false;
    }
    return (c_string::memcmp(self->mem, other->mem, self->size) == 0);
}

export fn eq_cstr(Slice *self, char *other) -> bool
    where integrity(self)
    where nullterm(other)
{
    usize othersize = (usize)c_string::strlen(other);
    static_attest(len(other) == othersize);
    return eq_bytes(self, (u8*)other, othersize);
}

export fn eq_bytes(Slice *self, u8 *other, usize othersize) -> bool
    where integrity(self)
    where len(other) >= othersize
{
    if self->size != othersize {
        return false;
    }
    return (c_string::memcmp(self->mem, other, self->size) == 0);
}

export fn make(Slice mut new *self, u8 *mem, usize size)
    where len(mem) >= size
    model len(self->mem) == self->size
    model len(self->mem) == size
    model integrity(self)
{
    self->size  =  size;
    self->mem   =  mem;
    static_attest(len(self->mem) == self->size);
}
